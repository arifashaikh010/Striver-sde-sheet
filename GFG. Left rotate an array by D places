//---------------------------------------- better TC:O(n+d) & SC:O(d) -------------------------------------------------------------

class Solution {
    void leftRotate(int[] arr, int n, int d) {
        d = d % n;
        int temp[] = new int[d];
        for(int i=0; i<d; i++){
            temp[i] = arr[i];
        }
        
        //shifting in original array
        for(int i=d; i<n ;i++){
            arr[i-d] = arr[i];
        }
        
        //temp -> arr
        int j=0;
        for(int i=n-d; i<n; i++){
            arr[i]=temp[j];
            j++
        }
    }
}

//little bit change .. little logic is applied

class Solution {
    void leftRotate(int[] arr, int n, int d) {
        d = d % n;
        int temp[] = new int[d];
        for(int i=0; i<d; i++){
            temp[i] = arr[i];
        }
        
        //shifting in original array
        for(int i=d; i<n ;i++){
            arr[i-d] = arr[i];
        }
        
        //temp -> arr
        for(int i=n-d; i<n; i++){
            arr[i]=temp[i-(n-d)];
        }
    }
}


/*

Example 1:
Input:
N = 7
Arr[] = {1, 2, 3, 4, 5, 6, 7}
D = 2
Output: 3 4 5 6 7 1 2

Example 2:
Input:
N = 4
Arr[] = {1, 3, 4, 2}
D = 3
Output: 2 1 3 4

*/
