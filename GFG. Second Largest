//---------------------------------------------- brute force TC:O(nlogn+n) ---------------------------------------------

sort
loop: i=n-2 to 0
if arr[i] != largest
print arr[i]

//---------------------------------------------- better TC:O(2n) ---------------------------------------------

class Solution {
    int print2largest(int arr[], int n) {
        int largest = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            if(arr[i]>largest){
                largest = arr[i];
            }
        }
        
        int s_largest =-1;
        for(int i=0;i<n;i++){
            if(arr[i]>s_largest && arr[i]!= largest){
                s_largest = arr[i];
            }
        }
        return s_largest;
    }
}

//---------------------------------------------- optimal TC:O(n) ---------------------------------------------

class Solution {
    int print2largest(int arr[], int n) {
        int largest = arr[0];
        int s_largest = -1;
        for(int i=1;i<n;i++){
            if(arr[i]>largest){
                s_largest = largest;
                largest = arr[i];
            }else if(arr[i]<largest && arr[i]>s_largest){
                s_largest = arr[i];
            }
        }
        return s_largest;
    }
}


/*
Example 1:
Input: 
N = 6
Arr[] = {12, 35, 1, 10, 34, 1}
Output: 34
Explanation: The largest element of the 
array is 35 and the second largest element
is 34.

Example 2:
Input: 
N = 3
Arr[] = {10, 5, 10}
Output: 5
Explanation: The largest element of 
the array is 10 and the second 
largest element is 5.
*/
